{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/home/raul/Documentos/projctos/projectos_Snir/teste/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/home/raul/Documentos/projctos/projectos_Snir/teste/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/raul/Documentos/projctos/projectos_Snir/teste/components/@Fields/contains/inputMasks.jsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport Cleave from \"cleave.js/react\";\nimport classnames from \"classnames\";\nimport { FormGroup, UncontrolledTooltip, InputGroup, InputGroupAddon, InputGroupText } from \"reactstrap\";\nexport default function InputMasks(_ref) {\n  _s();\n\n  var isrequired = _ref.isrequired,\n      rest = _objectWithoutProperties(_ref, [\"isrequired\"]);\n\n  var _useState = useState({\n    value: rest.hasOwnProperty(\"val\") ? rest.val : \"\",\n    bool: \"\"\n  }),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var defaultInfo = \"Teste22\";\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-control-label\",\n      htmlFor: rest.id || rest.name,\n      children: [rest.title, \" \", rest.isrequired === true ? /*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"text-danger\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: [rest.iconleft && /*#__PURE__*/_jsxDEV(UncontrolledTooltip, {\n        delay: 0,\n        placement: \"auto\",\n        target: rest.name,\n        children: /*#__PURE__*/_jsxDEV(\"small\", {\n          children: rest.info ? rest.info : defaultInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        className: classnames(\"input-group-merge\", {\n          focused: status.bool\n        }),\n        children: [rest.iconleft && /*#__PURE__*/_jsxDEV(InputGroupAddon, {\n          id: rest.name,\n          addonType: \"prepend\",\n          onClick: rest.hasOwnProperty(\"onLeftIconClick\") ? rest.onLeftIconClick : function () {},\n          children: /*#__PURE__*/_jsxDEV(InputGroupText, {\n            className: \"form-control-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: rest.iconleft\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Cleave, _objectSpread(_objectSpread({\n          className: \"form-control form-control-sm\",\n          style: {\n            textAlign: \"right\"\n          }\n        }, rest), {}, {\n          onBlur: function onBlur(e) {\n            setStatus({\n              bool: \"\"\n            });\n            if (!rest.hasOwnProperty(\"onBlur\")) return;\n            rest.onBlur(e);\n          },\n          options: rest.options\n          /*options={{\n              numeral: true,\n              delimiter: \",\",\n              numeralThousandsGroupStyle: \"thousand\"\n          }}*/\n\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), rest.iconasstring && /*#__PURE__*/_jsxDEV(InputGroupAddon, {\n          addonType: \"append\",\n          onClick: rest.hasOwnProperty(\"onRightIconClick\") ? rest.onRightIconClick : function () {},\n          children: /*#__PURE__*/_jsxDEV(InputGroupText, {\n            style: rest.style,\n            className: \"form-control-sm iconasstring\",\n            children: rest.iconasstring\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), rest.iconright && /*#__PURE__*/_jsxDEV(InputGroupAddon, {\n          addonType: \"append\",\n          onClick: rest.hasOwnProperty(\"onRightIconClick\") ? rest.onRightIconClick : function () {},\n          children: /*#__PURE__*/_jsxDEV(InputGroupText, {\n            style: {\n              fontSize: \"0.7rem\"\n            },\n            className: \"form-control-sm useText\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: rest.iconright\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 33\n            }, this), rest.usetext]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), rest.err && /*#__PURE__*/_jsxDEV(\"small\", {\n        style: {\n          color: \"red\"\n        },\n        children: rest.err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(InputMasks, \"pIfYehzpYP+xOc+BERwnlziRlyg=\");\n\n_c = InputMasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputMasks\");","map":{"version":3,"sources":["/home/raul/Documentos/projctos/projectos_Snir/teste/components/@Fields/contains/inputMasks.jsx"],"names":["React","useState","Cleave","classnames","FormGroup","UncontrolledTooltip","InputGroup","InputGroupAddon","InputGroupText","InputMasks","isrequired","rest","value","hasOwnProperty","val","bool","status","setStatus","defaultInfo","id","name","title","iconleft","info","focused","onLeftIconClick","textAlign","e","onBlur","options","iconasstring","onRightIconClick","style","iconright","fontSize","usetext","err","color"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cleave from \"cleave.js/react\";\nimport classnames from \"classnames\";\nimport {\n    FormGroup,\n    UncontrolledTooltip,\n    InputGroup,\n    InputGroupAddon,\n    InputGroupText\n} from \"reactstrap\";\n\nexport default function InputMasks({ isrequired, ...rest }) {\n    const [status, setStatus] = useState({\n        value: rest.hasOwnProperty(\"val\") ? rest.val : \"\",\n        bool: \"\"\n    });\n    const defaultInfo = \"Teste22\";\n\n    return (\n        <>\n            <label\n                className=\"form-control-label\"\n                htmlFor={rest.id || rest.name}\n            >\n                {rest.title}{\" \"}\n                {rest.isrequired === true ? (\n                    <small className=\"text-danger\">*</small>\n                ) : (\n                    \"\"\n                )}\n            </label>\n            <FormGroup>\n                {rest.iconleft && (\n                    <UncontrolledTooltip\n                        delay={0}\n                        placement=\"auto\"\n                        target={rest.name}\n                    >\n                        <small>{rest.info ? rest.info : defaultInfo}</small>\n                    </UncontrolledTooltip>\n                )}\n                <InputGroup\n                    className={classnames(\"input-group-merge\", {\n                        focused: status.bool\n                    })}\n                >\n                    {rest.iconleft && (\n                        <InputGroupAddon\n                            id={rest.name}\n                            addonType=\"prepend\"\n                            onClick={\n                                rest.hasOwnProperty(\"onLeftIconClick\")\n                                    ? rest.onLeftIconClick\n                                    : () => {}\n                            }\n                        >\n                            <InputGroupText className=\"form-control-sm\">\n                                <i className={rest.iconleft} />\n                            </InputGroupText>\n                        </InputGroupAddon>\n                    )}\n                    <Cleave\n                        className=\"form-control form-control-sm\"\n                        style={{ textAlign: \"right\" }}\n                        {...rest}\n                        onBlur={e => {\n                            setStatus({ bool: \"\" });\n                            if (!rest.hasOwnProperty(\"onBlur\")) return;\n                            rest.onBlur(e);\n                        }}\n                        options={rest.options}\n                        /*options={{\n                            numeral: true,\n                            delimiter: \",\",\n                            numeralThousandsGroupStyle: \"thousand\"\n                        }}*/\n                    />\n                    {rest.iconasstring && (\n                        <InputGroupAddon\n                            addonType=\"append\"\n                            onClick={\n                                rest.hasOwnProperty(\"onRightIconClick\")\n                                    ? rest.onRightIconClick\n                                    : () => {}\n                            }\n                        >\n                            <InputGroupText\n                                style={rest.style}\n                                className=\"form-control-sm iconasstring\"\n                            >\n                                {rest.iconasstring}\n                            </InputGroupText>\n                        </InputGroupAddon>\n                    )}\n                    {rest.iconright && (\n                        <InputGroupAddon\n                            addonType=\"append\"\n                            onClick={\n                                rest.hasOwnProperty(\"onRightIconClick\")\n                                    ? rest.onRightIconClick\n                                    : () => {}\n                            }\n                        >\n                            <InputGroupText\n                                style={{ fontSize: \"0.7rem\" }}\n                                className=\"form-control-sm useText\"\n                            >\n                                <i className={rest.iconright} />\n                                {rest.usetext}\n                            </InputGroupText>\n                        </InputGroupAddon>\n                    )}\n                </InputGroup>\n                {rest.err && <small style={{ color: \"red\" }}>{rest.err}</small>}\n            </FormGroup>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}